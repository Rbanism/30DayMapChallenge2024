---
title: "2. Lines Map: Natural roads in Bucharest"
author:
  - "Claudiu Forgaci"
  - "Francesco Nattino"
date: "2024-10-25"
format: 
  html: default
  pdf: default
---

### 0. Load packages

```{r}
pkgs <- c("tidyverse", "sf", "pak", "sysfonts", "showtext", "ggtext", "scales",
          "osmdata", "magick", "grid", "rnaturalearth", "rnaturalearthdata",
          "fs", "spacyr", "nominatimlite")
missing_pkgs <- pkgs[!(pkgs %in% installed.packages()[, "Package"])]
if (length(missing_pkgs)) install.packages(missing_pkgs)
lapply(pkgs, library, character.only = TRUE)
```

```{r}
rbanism_logo <- image_read('../rbanism_logo_white.png')
colored_rbanism_logo <- image_colorize(rbanism_logo, opacity = 100, color = "#155294")
image_write(colored_rbanism_logo, "img/colored_rbanism_logo.png")
```

### 1. Get all place names

```{r}
spacy_initialize(model = "en_core_web_sm")

all_dirs <- fs::dir_ls("../", recurse = TRUE, type = "file")

filtered_files <- all_dirs[
  grepl("^\\.\\.\\/..Nov", all_files) & 
  grepl("\\.(qmd|R)$", all_files)
]
```

```{r}
extract_places_from_file <- function(file_path) {
  text <- paste(readLines(file_path, warn = FALSE), collapse = " ")
  parsed <- spacy_parse(text, entity = TRUE)
  entities <- entity_extract(parsed)
  places <- entities[entities$entity_type %in% c("GPE", "LOC", "FAC"), ]
  if (nrow(places) > 0) places$file <- file_path
  return(places)
}

results <- do.call(rbind, lapply(filtered_files, extract_places_from_file))

if (!is.null(results)) {
  results <- unique(results)
  print(results)
} else {
  message("No place names found.")
}
```

```{r}
world <- ne_countries(scale = "medium", returnclass = "sf")
locations <- geo_lite(results$entity, return_addresses = TRUE)

locations <- locations |> 
  filter(!is.na(lat)) |> 
  select(-address) |> 
  group_by(query, lat, lon) |> 
  summarise(n = n(), .groups = "drop")

ggplot(locations, aes(lon, lat)) +
  geom_point(color = "red") +
  labs(title = "Places mentioned in the text",
       subtitle = "Size of the point represents the number of mentions",
       caption = "Data: OpenStreetMap\nAuthor: Claudiu Forgaci\nPackages used: spacyr, nominatimlite")
```


## Plot the Point Map

### 1. Create the plot

```{r}
# Create the base plot
p <- ggplot() +
  geom_sf(data = street_data, linewidth = 0.05, color = "white") +
  geom_sf(data = strokes, aes(linewidth = as.numeric(length)), color = "#FFFFC5") +
  scale_linewidth_continuous(name = "Main structures:", range = c(0.1, 1.2)) +
  xlim(418500, 437500) +
  ylim(4909800, 4931500) +
  coord_sf(datum = st_crs(32635))
```

### 2. Style the map

#### 2.1 Add custom fonts

```{r}
# Add Google Fonts to the system
font_add_google("Roboto", "roboto")  # Add the "Roboto" font
font_add_google("Montserrat", "montserrat")  # Add the "Montserrat" font
showtext_auto()
```

#### 2.2 Plot your map

```{r}
p_styled <- p +
  theme_void() +
  theme(
    plot.background = element_rect(fill = "#103251",
                                    color = NA),
    plot.margin = margin(10, 90, 10, 90),
    legend.position = "bottom",
    legend.box = "horizontal",
    # legend.title = element_blank(), 
    legend.title = element_text(size = 13,
                              family = "montserrat",
                              color = "white"), 
    legend.text = element_text(size = 13,
                              family = "montserrat",
                              color = "white"),  
    plot.title = element_text(size = 34,
                              face = "bold",
                              family = "montserrat",
                              color = "white"), 
    plot.subtitle = element_text(size = 13,
                              family = "montserrat",
                              color = "white"), 
    plot.caption = element_text(size = 10,
                              family = "montserrat",
                              color = "white",
                              hjust = 0,
                              lineheight = 0.4),
    legend.key.height = unit(1, "cm"),  # Adjust height to make keys squared
    legend.key.width = unit(1, "cm"),   # Adjust width to match height
  ) +
  # Control legend appearance
  labs(title = "The structure of Bucharest",
       subtitle = "Continuous streets along the main street network, lineweight by length\n",
       caption = "Data: OpenStreetMap\nAuthor: Claudiu Forgaci\nPackages used:
- Forgaci C, Nattino F (2024). CRiSp: Automate the Delineation of Urban River Spaces. R package version 0.0.0.9000, https://cityriverspaces.github.io/CRiSp/.
- Nattino F, Forgaci C (2024). rcoins: Continuity in street networks. R package version 0.0.0.9000, https://cityriverspaces.github.io/rcoins/") 

p_styled
```

```{r}
p_styled <- cowplot::ggdraw(p_styled) +
  cowplot::draw_image(rbanism_logo, x = 0, y = 0, width = 0.1, height = 0.1, hjust = 0, vjust = 0)
```

```{r}
# Define the output file name
output_file <- "output/2Nov_StreetStrokes.png"

# Export the map as a PNG with 1:1 aspect ratio
ggsave(filename = output_file, plot = p_styled, device = "png", 
       width = 6, height = 6, dpi = 300)

# Print a message to confirm export
cat("Map has been exported as", output_file, "with a 1:1 aspect ratio.\n")
```

## And here is the map!

![Street strokes in Bucharest](output/2-streetstrokes.png)
